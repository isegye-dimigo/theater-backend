generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Media {
  id                 Int                 @id @default(autoincrement()) @db.UnsignedInt
  hash               String              @unique(map: "UNIQUE INDEX(hash)") @db.VarChar(128)
  userId             Int                 @map("user_id") @db.UnsignedInt
  type               String              @db.VarChar(3)
  size               Int                 @db.UnsignedInt
  width              Int                 @db.UnsignedInt
  height             Int                 @db.UnsignedInt
  aspectRatio        String              @map("aspect_ratio") @db.VarChar(16)
  isVideo            Boolean             @map("is_video") @db.Bit(1)
  isDeleted          Boolean             @default(dbgenerated("(b'0')")) @map("is_deleted") @db.Bit(1)
  createdAt          DateTime            @default(now()) @map("created_at") @db.DateTime(0)
  user               User                @relation("FOREIGN KEY(media.user_id,user.id)", fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FOREIGN KEY(media.user_id,user.id)")
  mediaVideos        MediaVideo[]
  mediaVideoMetadata MediaVideoMetadata?
  imageMovie         Movie?              @relation("FOREIGN KEY(movie.image_media_id,media.id)")
  videoMovie         Movie?              @relation("FOREIGN KEY(movie.video_media_id,media.id)")
  bannerUser         User?               @relation("FOREIGN KEY(user.banner_media_id,media.id)")
  profileUser        User?               @relation("FOREIGN KEY(user.profile_media_id,media.id)")

  @@index([userId], map: "FOREIGN KEY(media.user_id,user.id)")
  @@map("media")
}

model MediaVideo {
  id           Int   @id @default(autoincrement()) @db.UnsignedInt
  mediaId      Int   @map("media_id") @db.UnsignedInt
  index        Int   @db.UnsignedInt
  size         Int   @db.UnsignedInt
  duration     Float
  videoBitRate Int   @map("video_bit_rate") @db.UnsignedInt
  audioBitRate Int   @map("audio_bit_rate") @db.UnsignedInt
  media        Media @relation(fields: [mediaId], references: [id], onDelete: Cascade, onUpdate: Restrict, map: "FOREIGN KEY(media_video.media_id,media.id)")

  @@unique([mediaId, index], map: "UNIQUE INDEX(media_id,index)")
  @@map("media_video")
}

model MediaVideoMetadata {
  id           Int   @id @default(autoincrement()) @db.UnsignedInt
  mediaId      Int   @unique(map: "UNIQUE INDEX(media_id)") @map("media_id") @db.UnsignedInt
  duration     Float
  frameRate    Float @map("frame_rate")
  bitRate      Int   @map("bit_rate") @db.UnsignedInt
  sampleRate   Int   @map("sample_rate") @db.UnsignedInt
  channelCount Int   @map("channel_count") @db.UnsignedTinyInt
  media        Media @relation(fields: [mediaId], references: [id], onDelete: Cascade, map: "FOREIGN KEY(media_video_metadata.media_id,media.id)")

  @@map("media_video_metadata")
}

model Movie {
  id              Int              @id @default(autoincrement()) @db.UnsignedInt
  userId          Int              @map("user_id") @db.UnsignedInt
  title           String           @db.VarChar(128)
  description     String           @db.VarChar(4096)
  videoMediaId    Int              @unique(map: "UNIQUE INDEX(video_media_id)") @map("video_media_id") @db.UnsignedInt
  imageMediaId    Int              @unique(map: "UNIQUE INDEX(image_media_id)") @map("image_media_id") @db.UnsignedInt
  isDeleted       Boolean          @default(dbgenerated("(b'0')")) @map("is_deleted") @db.Bit(1)
  createdAt       DateTime         @default(now()) @map("created_at") @db.DateTime(0)
  imageMedia      Media            @relation("FOREIGN KEY(movie.image_media_id,media.id)", fields: [imageMediaId], references: [id], onUpdate: Restrict, map: "FOREIGN KEY(movie.image_media_id,media.id)")
  user            User             @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "movie.user_id,user.id")
  videoMedia      Media            @relation("FOREIGN KEY(movie.video_media_id,media.id)", fields: [videoMediaId], references: [id], onUpdate: Restrict, map: "FOREIGN KEY(movie.video_media_id,media.id)")
  movieComments   MovieComment[]
  movieLikes      MovieLike[]
  movieStars      MovieStar[]
  movieStatistics MovieStatistic[]
  userHistories   UserHistory[]

  @@index([userId], map: "FOREIGN KEY(movie.user_id,user.id)")
  @@map("movie")
}

model MovieComment {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  movieId   Int      @map("movie_id") @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt
  time      Int      @db.UnsignedInt
  content   String   @db.VarChar(128)
  isDeleted Boolean  @default(dbgenerated("(b'0')")) @map("is_deleted") @db.Bit(1)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  movie     Movie    @relation(fields: [movieId], references: [id], onUpdate: Restrict, map: "FOREIGN KEY(movie_comment.movie_id,movie.id)")
  user      User     @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "FOREIGN KEY(movie_comment.user_id,user.id)")

  @@index([movieId], map: "FOREIGN KEY(movie_comment.movie_id,movie.id)")
  @@index([userId], map: "FOREIGN KEY(movie_comment.user_id,user.id)")
  @@map("movie_comment")
}

model MovieLike {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  movieId   Int      @map("movie_id") @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  media     Movie    @relation(fields: [movieId], references: [id], onUpdate: Restrict, map: "FOREIGN KEY(movie_like.movie_id,movie.id)")
  user      User     @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "FOREIGN KEY(movie_like.user_id,user.id)")

  @@unique([movieId, userId], map: "UNIQUE INDEX(movie_id,user_id)")
  @@index([userId], map: "FOREIGN KEY(movie_like.user_id,user.id)")
  @@map("movie_like")
}

model MovieStar {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt
  movieId   Int      @map("movie_id") @db.UnsignedInt
  value     Int      @db.UnsignedTinyInt
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade, map: "FOREIGN KEY(movie_star.movie_id,movie.id)")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FOREIGN KEY(movie_star.user_id,user.id)")

  @@unique([userId, movieId], map: "UNIQUE INDEX (user_id,movie_id)")
  @@index([movieId], map: "FOREIGN KEY(movie_star.movie_id,movie.id)")
  @@map("movie_star")
}

model MovieStatistic {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  movieId      Int      @map("movie_id") @db.UnsignedInt
  viewCount    Int      @map("view_count") @db.UnsignedInt
  commentCount Int      @map("comment_count") @db.UnsignedInt
  likeCount    Int      @map("like_count") @db.UnsignedInt
  starAverage  Float    @map("star_average")
  createdAt    DateTime @default(now()) @map("created_at") @db.DateTime(0)
  movie        Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade, map: "FOREIGN KEY(movie_statistic.movie_id,movie.id)")

  @@index([movieId], map: "FOREIGN KEY(movie_statistic.movie_id,movie.id)")
  @@map("movie_statistic")
}

model Report {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt
  type      Int      @db.UnsignedTinyInt
  targetId  Int      @map("target_id") @db.UnsignedInt
  isDeleted Boolean  @default(dbgenerated("(b'0')")) @map("is_deleted") @db.Bit(1)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  user      User     @relation("FOREIGN KEY(report.user_id,user.id)", fields: [userId], references: [id], onUpdate: Restrict, map: "FOREIGN KEY(report.user_id,user.id)")

  @@index([userId], map: "FOREIGN KEY(report.user_id,user.id)")
  @@map("report")
}

model User {
  id              Int            @id @default(autoincrement()) @db.UnsignedInt
  email           String         @unique(map: "UNIQUE INDEX(email)") @db.VarChar(64)
  password        String         @db.VarChar(128)
  handle          String         @unique(map: "UNIQUE INDEX(handle)") @db.VarChar(32)
  name            String         @db.VarChar(64)
  description     String?        @db.VarChar(1024)
  profileMediaId  Int?           @unique(map: "UNIQUE INDEX(profile_media_id)") @map("profile_media_id") @db.UnsignedInt
  bannerMediaId   Int?           @unique(map: "UNIQUE INDEX(banner_media_id)") @map("banner_media_id") @db.UnsignedInt
  verificationKey String?        @unique(map: "UNIQUE INDEX(verification_key)") @map("verification_key") @db.VarChar(40)
  isVerified      Boolean        @default(dbgenerated("(b'0')")) @map("is_verified") @db.Bit(1)
  isDeleted       Boolean        @default(dbgenerated("(b'0')")) @map("is_deleted") @db.Bit(1)
  createdAt       DateTime       @default(now()) @map("created_at") @db.DateTime(0)
  medias          Media[]        @relation("FOREIGN KEY(media.user_id,user.id)")
  movies          Movie[]
  movieComments   MovieComment[]
  movieLikes      MovieLike[]
  movieStars      MovieStar[]
  reports         Report[]       @relation("FOREIGN KEY(report.user_id,user.id)")
  bannerMedia     Media?         @relation("FOREIGN KEY(user.banner_media_id,media.id)", fields: [bannerMediaId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FOREIGN KEY(user.banner_media_id,media.id)")
  profileMedia    Media?         @relation("FOREIGN KEY(user.profile_media_id,media.id)", fields: [profileMediaId], references: [id], onDelete: Restrict, onUpdate: Restrict, map: "FOREIGN KEY(user.profile_media_id,media.id)")
  userHistories   UserHistory[]

  @@map("user")
}

model UserHistory {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt
  movieId   Int      @map("movie_id") @db.UnsignedInt
  isDeleted Boolean  @default(dbgenerated("(b'0')")) @map("is_deleted") @db.Bit(1)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  movie     Movie    @relation(fields: [movieId], references: [id], onUpdate: Restrict, map: "FOREIGN KEY(user_history.movie_id,movie.id)")
  user      User     @relation(fields: [userId], references: [id], onUpdate: Restrict, map: "FOREIGN KEY(user_history.user_id,user.id)")

  @@index([movieId], map: "FOREIGN KEY(user_history.movie_id,movie.id)")
  @@index([userId], map: "FOREIGN KEY(user_history.user_id,user.id)")
  @@map("user_history")
}
