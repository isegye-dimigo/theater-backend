generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id     Int     @id @default(autoincrement()) @db.UnsignedInt
  title  String  @unique(map: "UNIQUE INDEX(title)") @db.VarChar(32)
  movies Movie[]

  @@map("category")
}

model Media {
  id           Int         @id @default(autoincrement()) @db.UnsignedInt
  hash         String      @unique(map: "UNIQUE INDEX(hash)") @db.VarChar(128)
  userId       Int         @map("user_id") @db.UnsignedInt
  type         String      @db.VarChar(3)
  size         Int         @db.UnsignedInt
  width        Int         @db.UnsignedSmallInt
  height       Int         @db.UnsignedSmallInt
  aspectRatio  String      @map("aspect_ratio") @db.VarChar(16)
  isDeleted    Boolean     @default(dbgenerated("(b'0')")) @map("is_deleted") @db.Bit(1)
  createdAt    DateTime    @default(now()) @map("created_at") @db.DateTime(0)
  user         User        @relation("FOREIGN KEY(media.user_id,user.id)", fields: [userId], references: [id], map: "FOREIGN KEY(media.user_id,user.id)")
  mediaParts   MediaPart[]
  mediaVideo   MediaVideo?
  imageMovie   Movie[]     @relation("FOREIGN KEY(movie.image_media_id,media.id)")
  videoMovie   Movie?      @relation("FOREIGN KEY(movie.video_media_id,media.id)")
  series       Series[]
  bannerUsers  User[]      @relation("FOREIGN KEY(user.banner_media_id,media.id)")
  profileUsers User[]      @relation("FOREIGN KEY(user.profile_media_id,media.id)")

  @@index([userId], map: "FOREIGN KEY(media.user_id,user.id)")
  @@map("media")
}

model MediaPart {
  id           Int   @id @default(autoincrement()) @db.UnsignedInt
  mediaId      Int   @map("media_id") @db.UnsignedInt
  index        Int   @db.UnsignedInt
  size         Int   @db.UnsignedInt
  duration     Float
  videoBitRate Int   @map("video_bit_rate") @db.UnsignedInt
  audioBitRate Int   @map("audio_bit_rate") @db.UnsignedInt
  media        Media @relation(fields: [mediaId], references: [id], onDelete: Cascade, map: "FOREIGN KEY(media_part.media_id,media.id)")

  @@unique([mediaId, index], map: "UNIQUE INDEX(media_id,index)")
  @@map("media_part")
}

model MediaVideo {
  id           Int   @id @default(autoincrement()) @db.UnsignedInt
  mediaId      Int   @unique(map: "UNIQUE INDEX(media_id)") @map("media_id") @db.UnsignedInt
  duration     Float
  frameRate    Float @map("frame_rate")
  bitRate      Int   @map("bit_rate") @db.UnsignedInt
  sampleRate   Int   @map("sample_rate") @db.UnsignedInt
  channelCount Int   @map("channel_count") @db.UnsignedTinyInt
  media        Media @relation(fields: [mediaId], references: [id], onDelete: Cascade, map: "FOREIGN KEY(media_video.media_id,media.id)")

  @@map("media_video")
}

model Movie {
  id              Int              @id @default(autoincrement()) @db.UnsignedInt
  userId          Int              @map("user_id") @db.UnsignedInt
  title           String           @db.VarChar(128)
  description     String?          @db.VarChar(4096)
  imageMediaId    Int              @map("image_media_id") @db.UnsignedInt
  videoMediaId    Int              @unique(map: "UNIQUE INDEX(video_media_id)") @map("video_media_id") @db.UnsignedInt
  categoryId      Int              @map("category_id") @db.UnsignedInt
  isDeleted       Boolean          @default(dbgenerated("(b'0')")) @map("is_deleted") @db.Bit(1)
  createdAt       DateTime         @default(now()) @map("created_at") @db.DateTime(0)
  category        Category         @relation(fields: [categoryId], references: [id], map: "FOREIGN KEY(movie.category_id,category.id)")
  imageMedia      Media            @relation("FOREIGN KEY(movie.image_media_id,media.id)", fields: [imageMediaId], references: [id], map: "FOREIGN KEY(movie.image_media_id,media.id)")
  user            User             @relation(fields: [userId], references: [id], map: "movie.user_id,user.id")
  videoMedia      Media            @relation("FOREIGN KEY(movie.video_media_id,media.id)", fields: [videoMediaId], references: [id], map: "FOREIGN KEY(movie.video_media_id,media.id)")
  movieComments   MovieComment[]
  movieLikes      MovieLike[]
  movieStars      MovieStar[]
  movieStatistics MovieStatistic[]
  seriesMovie     SeriesMovie?
  userHistories   UserHistory[]

  @@index([userId], map: "FOREIGN KEY(movie.user_id,user.id)")
  @@index([categoryId], map: "FOREIGN KEY(movie.category_id,category.id)")
  @@index([imageMediaId], map: "FOREIGN KEY(movie.image_media_id,media.id)")
  @@map("movie")
}

model MovieComment {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  movieId   Int      @map("movie_id") @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt
  time      Float
  content   String   @db.VarChar(128)
  isDeleted Boolean  @default(dbgenerated("(b'0')")) @map("is_deleted") @db.Bit(1)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  movie     Movie    @relation(fields: [movieId], references: [id], map: "FOREIGN KEY(movie_comment.movie_id,movie.id)")
  user      User     @relation(fields: [userId], references: [id], map: "FOREIGN KEY(movie_comment.user_id,user.id)")

  @@index([movieId], map: "FOREIGN KEY(movie_comment.movie_id,movie.id)")
  @@index([userId], map: "FOREIGN KEY(movie_comment.user_id,user.id)")
  @@map("movie_comment")
}

model MovieLike {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  movieId   Int      @map("movie_id") @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  media     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade, map: "FOREIGN KEY(movie_like.movie_id,movie.id)")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FOREIGN KEY(movie_like.user_id,user.id)")

  @@unique([movieId, userId], map: "UNIQUE INDEX(movie_id,user_id)")
  @@index([userId], map: "FOREIGN KEY(movie_like.user_id,user.id)")
  @@map("movie_like")
}

model MovieStar {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt
  movieId   Int      @map("movie_id") @db.UnsignedInt
  value     Int      @db.UnsignedTinyInt
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  movie     Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade, map: "FOREIGN KEY(movie_star.movie_id,movie.id)")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "FOREIGN KEY(movie_star.user_id,user.id)")

  @@unique([userId, movieId], map: "UNIQUE INDEX (user_id,movie_id)")
  @@index([movieId], map: "FOREIGN KEY(movie_star.movie_id,movie.id)")
  @@map("movie_star")
}

model MovieStatistic {
  id           Int      @id @default(autoincrement()) @db.UnsignedInt
  movieId      Int      @map("movie_id") @db.UnsignedInt
  viewCount    Int      @map("view_count") @db.UnsignedInt
  commentCount Int      @map("comment_count") @db.UnsignedInt
  likeCount    Int      @map("like_count") @db.UnsignedInt
  starAverage  Float    @map("star_average")
  createdAt    DateTime @default(now()) @map("created_at") @db.DateTime(0)
  movie        Movie    @relation(fields: [movieId], references: [id], onDelete: Cascade, map: "FOREIGN KEY(movie_statistic.movie_id,movie.id)")

  @@index([movieId], map: "FOREIGN KEY(movie_statistic.movie_id,movie.id)")
  @@map("movie_statistic")
}

model Report {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt
  type      Int      @db.UnsignedTinyInt
  targetId  Int      @map("target_id") @db.UnsignedInt
  isDeleted Boolean  @default(dbgenerated("(b'0')")) @map("is_deleted") @db.Bit(1)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  user      User     @relation("FOREIGN KEY(report.user_id,user.id)", fields: [userId], references: [id], map: "FOREIGN KEY(report.user_id,user.id)")

  @@index([userId], map: "FOREIGN KEY(report.user_id,user.id)")
  @@map("report")
}

model Series {
  id           Int           @id @default(autoincrement()) @db.UnsignedInt
  userId       Int           @map("user_id") @db.UnsignedInt
  mediaId      Int           @map("media_id") @db.UnsignedInt
  title        String        @db.VarChar(128)
  description  String?       @db.VarChar(4096)
  createdAt    DateTime      @default(now()) @map("created_at") @db.DateTime(0)
  media        Media         @relation(fields: [mediaId], references: [id], map: "FOREIGN KEY(series.media_id,media.id)")
  user         User          @relation(fields: [userId], references: [id], map: "FOREIGN KEY(series.user_id,user.id)")
  seriesMovies SeriesMovie[]

  @@index([mediaId], map: "FOREIGN KEY(series.media_id,media.id)")
  @@index([userId], map: "FOREIGN KEY(series.user_id,user.id)")
  @@map("series")
}

model SeriesMovie {
  id       Int     @id @default(autoincrement()) @db.UnsignedInt
  seriesId Int     @map("series_id") @db.UnsignedInt
  movieId  Int     @unique(map: "UNIQUE INDEX(movie_id)") @map("movie_id") @db.UnsignedInt
  index    Int     @db.TinyInt
  subtitle String? @db.VarChar(128)
  movie    Movie   @relation(fields: [movieId], references: [id], map: "FOREIGN KEY(series_movie.movie_id,movie.id)")
  series   Series  @relation(fields: [seriesId], references: [id], map: "FOREIGN KEY(series_movie.series_id,series.id)")

  @@unique([seriesId, index], map: "UNIQUE INDEX(series_id,index)")
  @@index([seriesId], map: "FOREIGN KEY(series_movie.series_id,series.id)")
  @@map("series_movie")
}

model User {
  id             Int            @id @default(autoincrement()) @db.UnsignedInt
  email          String         @unique(map: "UNIQUE INDEX(email)") @db.VarChar(64)
  password       String         @db.VarChar(128)
  handle         String         @unique(map: "UNIQUE INDEX(handle)") @db.VarChar(32)
  name           String         @db.VarChar(64)
  description    String?        @db.VarChar(2048)
  profileMediaId Int?           @map("profile_media_id") @db.UnsignedInt
  bannerMediaId  Int?           @map("banner_media_id") @db.UnsignedInt
  isVerified     Boolean        @default(dbgenerated("(b'0')")) @map("is_verified") @db.Bit(1)
  isDeleted      Boolean        @default(dbgenerated("(b'0')")) @map("is_deleted") @db.Bit(1)
  createdAt      DateTime       @default(now()) @map("created_at") @db.DateTime(0)
  medias         Media[]        @relation("FOREIGN KEY(media.user_id,user.id)")
  movies         Movie[]
  movieComments  MovieComment[]
  movieLikes     MovieLike[]
  movieStars     MovieStar[]
  reports        Report[]       @relation("FOREIGN KEY(report.user_id,user.id)")
  series         Series[]
  bannerMedia    Media?         @relation("FOREIGN KEY(user.banner_media_id,media.id)", fields: [bannerMediaId], references: [id], onDelete: Restrict, map: "FOREIGN KEY(user.banner_media_id,media.id)")
  profileMedia   Media?         @relation("FOREIGN KEY(user.profile_media_id,media.id)", fields: [profileMediaId], references: [id], onDelete: Restrict, map: "FOREIGN KEY(user.profile_media_id,media.id)")
  userHistories  UserHistory[]

  @@index([bannerMediaId], map: "FOREIGN KEY(user.banner_media_id,media.id)")
  @@index([profileMediaId], map: "FOREIGN KEY(user.profile_media_id,media.id)")
  @@map("user")
}

model UserHistory {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  userId    Int      @map("user_id") @db.UnsignedInt
  movieId   Int      @map("movie_id") @db.UnsignedInt
  duration  Float
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)
  movie     Movie    @relation(fields: [movieId], references: [id], map: "FOREIGN KEY(user_history.movie_id,movie.id)")
  user      User     @relation(fields: [userId], references: [id], map: "FOREIGN KEY(user_history.user_id,user.id)")

  @@index([movieId], map: "FOREIGN KEY(user_history.movie_id,movie.id)")
  @@index([userId], map: "FOREIGN KEY(user_history.user_id,user.id)")
  @@map("user_history")
}

model UserVerification {
  id        Int      @id @default(autoincrement()) @db.UnsignedInt
  token     String   @unique(map: "UNIQUE INDEX(token)") @map("token") @db.VarChar(40)
  email     String   @unique(map: "UNIQUE INDEX(email)") @db.VarChar(64)
  password  String   @db.VarChar(128)
  name      String   @db.VarChar(64)
  createdAt DateTime @default(now()) @map("created_at") @db.DateTime(0)

  @@map("user_verification")
}
